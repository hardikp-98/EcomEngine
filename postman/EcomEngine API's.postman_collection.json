{
	"info": {
		"_postman_id": "b110b306-80d5-46ad-bc60-a87039c2b167",
		"name": "EcomEngine API's",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32367967"
	},
	"item": [
		{
			"name": "PING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - success and data\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
							"  pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Success field is a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Data field is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/api/v1/ping",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.success).to.exist;",
							"    pm.expect(responseData.jwt_token).to.exist;",
							"    pm.expect(responseData.expiresIn).to.exist;",
							"})",
							"",
							"pm.test('jwt_token is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.jwt_token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'jwt_token should not be empty');",
							"})",
							"",
							"pm.test('expiresIn is a positive integer', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.expiresIn).to.be.a('string').and.to.be.greaterThan(0, 'expiresIn should be a positive integer');",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "username",
						"value": "SYSTEM",
						"type": "text"
					},
					{
						"key": "password",
						"value": "SYSTEM123",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/v1/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.success).to.exist;",
							"  pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Success field is boolean\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.success).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Data field is an object\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Message field in the data object is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.data.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlNZU1RFTSIsImlhdCI6MTcwOTU0NDEzNywiZXhwIjoxNzA5NTQ3NzM3fQ.R_cLsd3Xj7-C9KOQ0wJfAXVFJ5cbo_oNnP03sZX6e-U",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"product_id\": \"IP15BL64PRO\",\r\n    \"product_name\": \"Apple Iphone 15 PRO\",\r\n    \"description\": \"Apple Iphone 15 PRO - Black 64 GB 12 GB RAM.\",\r\n    \"price\": 80000,\r\n    \"stock\": 100\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/v1/addproduct",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"addproduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - success and data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.success).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Success field is a boolean and is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.a('boolean');",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Data field is an object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlNZU1RFTSIsImlhdCI6MTcwOTU0NDEzNywiZXhwIjoxNzA5NTQ3NzM3fQ.R_cLsd3Xj7-C9KOQ0wJfAXVFJ5cbo_oNnP03sZX6e-U",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8000/api/v1/deleteproduct/:productid",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"deleteproduct",
						":productid"
					],
					"variable": [
						{
							"key": "productid",
							"value": "IP15BL64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.success).to.exist;",
							"  pm.expect(responseData.data).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Success is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.success).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Data is an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlNZU1RFTSIsImlhdCI6MTcwOTU0NDEzNywiZXhwIjoxNzA5NTQ3NzM3fQ.R_cLsd3Xj7-C9KOQ0wJfAXVFJ5cbo_oNnP03sZX6e-U",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"product_name\": \"Apple Iphone 15 \",\r\n    \"description\": \"Apple Iphone 15 - Black 64 GB 12 GB RAM.\",\r\n    \"price\": 70000,\r\n    \"stock\": 100\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/v1/updateproduct/:productid",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"updateproduct",
						":productid"
					],
					"variable": [
						{
							"key": "productid",
							"value": "IP15BL64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Price is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.price).to.be.a('number');",
							"    pm.expect(responseData.data.price).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Stock is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.stock).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.data.stock).to.be.at.least(0, \"Stock should be a non-negative number\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' object is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('object').and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlNZU1RFTSIsImlhdCI6MTcwOTU0NDEzNywiZXhwIjoxNzA5NTQ3NzM3fQ.R_cLsd3Xj7-C9KOQ0wJfAXVFJ5cbo_oNnP03sZX6e-U",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/v1/getproduct/:productid",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"getproduct",
						":productid"
					],
					"variable": [
						{
							"key": "productid",
							"value": "IP15BL64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.success).to.exist;",
							"    pm.expect(responseData.data).to.exist;",
							"})",
							"",
							"pm.test('Validate the pagefilter object', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.data.data.pagefilter).to.exist;",
							"    pm.expect(responseData.data.data.pagefilter).to.be.an('object');",
							"})",
							"",
							"pm.test('Verify the presence and length of rowData array', function () {",
							"    const responseData = pm.response.json();",
							"    const rowData = responseData.data.data.rowData;",
							"    pm.expect(rowData).to.exist.and.to.be.an('array');",
							"    pm.expect(rowData).to.have.lengthOf(0, 'Expected number of elements is not matching');",
							"})",
							"",
							"pm.test('Validate the \\'id\\' is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.data.rowData).to.be.an('array');",
							"    responseData.data.data.rowData.forEach(function (item) {",
							"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlNZU1RFTSIsImlhdCI6MTcwOTU0NDEzNywiZXhwIjoxNzA5NTQ3NzM3fQ.R_cLsd3Xj7-C9KOQ0wJfAXVFJ5cbo_oNnP03sZX6e-U",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/api/v1/list/all/:page/:pageSize",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"list",
						"all",
						":page",
						":pageSize"
					],
					"variable": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "pageSize",
							"value": "10"
						}
					]
				}
			},
			"response": []
		}
	]
}